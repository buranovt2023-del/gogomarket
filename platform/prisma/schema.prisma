
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/gogomarket-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  PENDING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified Boolean   @default(false)
  image         String?
  password      String
  role          UserRole  @default(BUYER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  sellerProfile SellerProfile?
  
  @@index([email])
  @@index([phone])
  @@index([role])
}

model SellerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  description     String?  @db.Text
  logo            String?
  verified        Boolean  @default(false)
  rating          Float    @default(0)
  totalSales      Int      @default(0)
  totalRevenue    Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]
}

// Address Management
model Address {
  id          String   @id @default(cuid())
  userId      String
  fullName    String
  phone       String
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("USA")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  @@index([userId])
}

// Category Management
model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?    @db.Text
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([slug])
  @@index([parentId])
}

// Product Management
enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

model Product {
  id              String        @id @default(cuid())
  sellerId        String
  categoryId      String
  title           String
  slug            String        @unique
  description     String        @db.Text
  price           Float
  compareAtPrice  Float?
  stock           Int           @default(0)
  sku             String?       @unique
  status          ProductStatus @default(PENDING)
  featured        Boolean       @default(false)
  rating          Float         @default(0)
  reviewCount     Int           @default(0)
  soldCount       Int           @default(0)
  views           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  seller          SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category        Category      @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  
  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([featured])
  @@index([slug])
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  url         String
  altText     String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

// Shopping Cart
model CartItem {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([userId])
}

// Order Management
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CARD
  WALLET
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  addressId       String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float
  tax             Float         @default(0)
  shippingCost    Float         @default(0)
  discount        Float         @default(0)
  total           Float
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  address         Address       @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  total       Float
  createdAt   DateTime @default(now())

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

// Review Management
model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int
  comment     String?  @db.Text
  helpful     Int      @default(0)
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}
